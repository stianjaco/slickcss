
// Display readable color on background
@function colorLuminance($color) {
  $color-rgb: ('red': red($color),'green': green($color),'blue': blue($color));
  @each $name, $value in $color-rgb {
    $adjusted: 0;
    $value: $value / 255;
    @if ($value < 0.03928) {
      $value: $value / 12.92;
    }
    @else {
      $value: ($value + .055) / 1.055;
      $value: powerNumber($value, 2);
    }
    $color-rgb: map-merge($color-rgb, ($name: $value));
  }
  @return (map-get($color-rgb, 'red') * .2126) + (map-get($color-rgb, 'green') * .7152) + (map-get($color-rgb, 'blue') * .0722);
}
@function powerNumber($number, $exp) {
  $value: 1;
  @if ($exp > 0) {
    @for $i from 1 through $exp {
      $value: $value * $number;
    }
  }
  @else if $exp < 0 {
    @for $i from 1 through -$exp {
      $value: $value / $number;
    }
  }
  @return $value
}
@function findColorInvert($color) {
  @if (colorLuminance($color) > 0.55) {
    @return rgba(#000, 0.7)
  }
  @else {
    @return #fff
  }
}



@function calculateRem($size) {
  $self_base_size: 16px;
  @if variable-exists(base-size) {
    $self_base_size: $base-size;
  }
  $remSize: $size / $self_base_size;
  @return $remSize * 1rem;
}
@function calculateEm($size) {
  $self_base_size: 16px;
  @if variable-exists(base-size) {
    $self_base_size: $base-size;
  }
  $emSize: $size / $self_base_size;
  @return $emSize * 1em;
}

@function parseInt($n) { 
  @return $n / ($n * 0 + 1);
}

//convert rem back to px

@function rem-to-px($size) {
  $self_base_size: 16px;
  @if variable-exists(base-size) {
    $self_base_size: $base-size;
  }

  $value: parseInt($size) * $self_base_size;
  @return round($value);
}

@function number($value) {
  @if type-of($value) == 'number' {
    @return $value;
  } @else if type-of($value) != 'string' {
    $_: log('Value for `to-number` should be a number or a string.');
  }
  
  $result: 0;
  $digits: 0;
  $minus: str-slice($value, 1, 1) == '-';
  $numbers: ('0': 0, '1': 1, '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9);
  
  @for $i from if($minus, 2, 1) through str-length($value) {
    $character: str-slice($value, $i, $i);
    
    @if not (index(map-keys($numbers), $character) or $character == '.') {
      @return to-length(if($minus, -$result, $result), str-slice($value, $i))
    }
    
    @if $character == '.' {
      $digits: 1; 
    } @else if $digits == 0 {
      $result: $result * 10 + map-get($numbers, $character);  
    } @else {
      $digits: $digits * 10;
      $result: $result + map-get($numbers, $character) / $digits;
    }
  }
  
  @return if($minus, -$result, $result);;
}

@function inlist($list,$var) {
    $_out: false;
    @each $item in $list { @if $item == $var { $_out: true; } }
    @return $_out;
}